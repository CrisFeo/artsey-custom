#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BTN_IT 3
#define BTN_MT 2
#define BTN_RT 1
#define BTN_PT 0

#define BTN_IB 7
#define BTN_MB 6
#define BTN_RB 5
#define BTN_PB 4

#define COMBO(LAYERS, NAME, KEYS, BINDINGS) \
  combo_##NAME { \
    timeout-ms = <100>; \
    key-positions = <KEYS>; \
    bindings = <BINDINGS>; \
    layers = <LAYERS>; \
  };

#define BASE_LAYER_ID 0
#define SYMBOL_LAYER_ID 1
#define MOVE_LAYER_ID 2
#define SELECT_LAYER_ID 3
#define BLUETOOTH_LAYER_ID 4

/ {
  keymap {
    compatible = "zmk,keymap";
    base_layer {
      bindings = <
        &kp S  &kp T  &kp R  &kp A
        &kp O  &kp I  &kp Y  &kp E
      >;
    };
    symbol_layer {
      bindings = <
        &kp NUMBER_3  &kp NUMBER_2  &kp NUMBER_1  &kp NUMBER_0
        &kp NUMBER_7  &kp NUMBER_6  &kp NUMBER_5  &kp NUMBER_4
      >;
    };
    move_layer {
      bindings = <
        &kp LC(LEFT_ARROW)  &kp LC(UP_ARROW)  &kp LC(DOWN_ARROW)  &kp LC(RIGHT_ARROW)
        &kp LEFT_ARROW      &kp UP_ARROW      &kp DOWN_ARROW      &kp RIGHT_ARROW
      >;
    };
    select_layer {
      bindings = <
        &kp LS(LC(LEFT_ARROW))  &kp LS(LC(UP_ARROW))  &kp LS(LC(DOWN_ARROW))  &kp LS(LC(RIGHT_ARROW))
        &kp LS(LEFT_ARROW)      &kp LS(UP_ARROW)      &kp LS(DOWN_ARROW)      &kp LS(RIGHT_ARROW)
      >;
    };
    bluetooth_layer {
      bindings = <
        &none          &none          &none          &none
        &bt BT_SEL 3   &bt BT_SEL 2   &bt BT_SEL 1   &bt BT_SEL 0
      >;
    };
  };
};

/ {
  combos {
    compatible = "zmk,combos";

    // Return to base layer from symbol, move, and bluetooth layers
    COMBO(SYMBOL_LAYER_ID MOVE_LAYER_ID BLUETOOTH_LAYER_ID, layer_base, BTN_IB BTN_RT, &to BASE_LAYER_ID)

    // Add modifiers to base and symbol layers
    COMBO(BASE_LAYER_ID SYMBOL_LAYER_ID, control, BTN_PT BTN_IB,               &sk LEFT_CONTROL)
    COMBO(BASE_LAYER_ID SYMBOL_LAYER_ID, gui,     BTN_PT BTN_MB,               &sk LEFT_GUI)
    COMBO(BASE_LAYER_ID SYMBOL_LAYER_ID, alt,     BTN_PT BTN_RB,               &sk LEFT_ALT)
    COMBO(BASE_LAYER_ID SYMBOL_LAYER_ID, shift,   BTN_MT BTN_RT BTN_PT BTN_IB, &sk LEFT_SHIFT)

    // Add shift toggle to base and symbol layers
    COMBO(BASE_LAYER_ID SYMBOL_LAYER_ID,  shift_toggle, BTN_PT BTN_PB, &kt LEFT_SHIFT)

    // Base layer
    ////////////////////

    COMBO(BASE_LAYER_ID, b, BTN_IB BTN_PB,        &kp B)
    COMBO(BASE_LAYER_ID, c, BTN_IB BTN_MB,        &kp C)
    COMBO(BASE_LAYER_ID, d, BTN_IT BTN_MT BTN_RT, &kp D)
    COMBO(BASE_LAYER_ID, f, BTN_IT BTN_MT,        &kp F)
    COMBO(BASE_LAYER_ID, g, BTN_MT BTN_RT,        &kp G)
    COMBO(BASE_LAYER_ID, h, BTN_IB BTN_RB,        &kp H)
    COMBO(BASE_LAYER_ID, j, BTN_RT BTN_PT,        &kp J)
    COMBO(BASE_LAYER_ID, k, BTN_MB BTN_PB,        &kp K)
    COMBO(BASE_LAYER_ID, l, BTN_IB BTN_MB BTN_RB, &kp L)
    COMBO(BASE_LAYER_ID, m, BTN_MB BTN_RB BTN_PB, &kp M)
    COMBO(BASE_LAYER_ID, n, BTN_RB BTN_PB,        &kp N)
    COMBO(BASE_LAYER_ID, p, BTN_IB BTN_RB BTN_PB, &kp P)
    COMBO(BASE_LAYER_ID, q, BTN_IT BTN_RT BTN_PT, &kp Q)
    COMBO(BASE_LAYER_ID, u, BTN_MB BTN_RB,        &kp U)
    COMBO(BASE_LAYER_ID, v, BTN_MT BTN_PT,        &kp V)
    COMBO(BASE_LAYER_ID, w, BTN_IT BTN_PT,        &kp W)
    COMBO(BASE_LAYER_ID, x, BTN_MT BTN_RT BTN_PT, &kp X)
    COMBO(BASE_LAYER_ID, z, BTN_IT BTN_RT,        &kp Z)

    COMBO(BASE_LAYER_ID, apostrophe, BTN_IT BTN_MB BTN_RB, &kp APOSTROPHE)
    COMBO(BASE_LAYER_ID, period,     BTN_IT BTN_MB,        &kp PERIOD)
    COMBO(BASE_LAYER_ID, colon,      BTN_IT BTN_RB,        &kp COLON)
    COMBO(BASE_LAYER_ID, question,   BTN_IT BTN_PB,        &kp QUESTION)

    COMBO(BASE_LAYER_ID, space,     BTN_IB BTN_MB BTN_RB BTN_PB, &kp SPACE)
    COMBO(BASE_LAYER_ID, enter,     BTN_IT BTN_IB,               &kp ENTER)
    COMBO(BASE_LAYER_ID, escape,    BTN_IT BTN_MT BTN_PB,        &kp ESCAPE)
    COMBO(BASE_LAYER_ID, tab,       BTN_IT BTN_MT BTN_RT BTN_PB, &kp TAB)
    COMBO(BASE_LAYER_ID, backspace, BTN_MT BTN_IB,               &kp BACKSPACE)
    COMBO(BASE_LAYER_ID, delete,    BTN_MT BTN_RB,               &kp DELETE)

    COMBO(BASE_LAYER_ID, layer_symbol,    BTN_IT BTN_MT BTN_RT BTN_PT, &sl SYMBOL_LAYER_ID)
    COMBO(BASE_LAYER_ID, layer_move,      BTN_MT BTN_MB,               &to MOVE_LAYER_ID)
    COMBO(BASE_LAYER_ID, layer_bluetooth, BTN_RT BTN_RB,               &sl BLUETOOTH_LAYER_ID)

    // Symbol layer
    ////////////////////

    COMBO(SYMBOL_LAYER_ID, 8, BTN_IT BTN_MT, &kp NUMBER_8)
    COMBO(SYMBOL_LAYER_ID, 9, BTN_IB BTN_MB, &kp NUMBER_9)

    COMBO(SYMBOL_LAYER_ID, plus,     BTN_IB BTN_RB BTN_PB,        &kp PLUS)
    COMBO(SYMBOL_LAYER_ID, asterisk, BTN_IT BTN_RT BTN_PT,        &kp ASTERISK)
    COMBO(SYMBOL_LAYER_ID, minus,    BTN_IB BTN_MB BTN_RB,        &kp MINUS)
    COMBO(SYMBOL_LAYER_ID, equal,    BTN_MB BTN_RB BTN_PB,        &kp EQUAL)
    COMBO(SYMBOL_LAYER_ID, caret,    BTN_IT BTN_MT BTN_RT BTN_PT, &kp CARET)

    COMBO(SYMBOL_LAYER_ID, left_parenthesis,     BTN_RT BTN_PT,        &kp LEFT_PARENTHESIS)
    COMBO(SYMBOL_LAYER_ID, right_parenthesis,    BTN_MT BTN_RT,        &kp RIGHT_PARENTHESIS)
    COMBO(SYMBOL_LAYER_ID, left_curly_bracket,   BTN_RB BTN_PB,        &kp LEFT_BRACE)
    COMBO(SYMBOL_LAYER_ID, right_curly_bracket,  BTN_PB BTN_MB,        &kp RIGHT_BRACE)
    COMBO(SYMBOL_LAYER_ID, left_square_bracket,  BTN_MT BTN_PT,        &kp LEFT_BRACKET)
    COMBO(SYMBOL_LAYER_ID, right_square_bracket, BTN_IT BTN_RT,        &kp RIGHT_BRACKET)
    COMBO(SYMBOL_LAYER_ID, left_angle_bracket,   BTN_MB BTN_PB,        &kp LESS_THAN)
    COMBO(SYMBOL_LAYER_ID, right_angle_bracket,  BTN_IB BTN_RB,        &kp GREATER_THAN)
    COMBO(SYMBOL_LAYER_ID, forward_slash,        BTN_IT BTN_MT BTN_RT, &kp SLASH)
    COMBO(SYMBOL_LAYER_ID, backward_slash,       BTN_MT BTN_RT BTN_PT, &kp BACKSLASH)

    COMBO(SYMBOL_LAYER_ID, vertical_bar, BTN_IB BTN_PB,               &kp PIPE)
    COMBO(SYMBOL_LAYER_ID, quote,        BTN_IT BTN_MB BTN_RB,        &kp DOUBLE_QUOTES)
    COMBO(SYMBOL_LAYER_ID, comma,        BTN_IT BTN_MB,               &kp COMMA)
    COMBO(SYMBOL_LAYER_ID, semicolon,    BTN_IT BTN_RB,               &kp SEMICOLON)
    COMBO(SYMBOL_LAYER_ID, exclamation,  BTN_IT BTN_PB,               &kp EXCLAMATION)
    COMBO(SYMBOL_LAYER_ID, grave,        BTN_IT BTN_MT BTN_RT BTN_PB, &kp GRAVE)
    COMBO(SYMBOL_LAYER_ID, tilde,        BTN_RT BTN_RB,               &kp TILDE)
    COMBO(SYMBOL_LAYER_ID, at,           BTN_IT BTN_MT BTN_PB,        &kp AT_SIGN)
    COMBO(SYMBOL_LAYER_ID, pound,        BTN_IT BTN_IB,               &kp POUND)
    COMBO(SYMBOL_LAYER_ID, dollar,       BTN_MT BTN_IB,               &kp DOLLAR)
    COMBO(SYMBOL_LAYER_ID, percent,      BTN_MT BTN_RB,               &kp PERCENT)
    COMBO(SYMBOL_LAYER_ID, ampersand,    BTN_IT BTN_PT,               &kp AMPERSAND)
    COMBO(SYMBOL_LAYER_ID, underscore,   BTN_IB BTN_MB BTN_RB BTN_PB, &kp UNDERSCORE)

    // Move layer
    ////////////////////

    COMBO(MOVE_LAYER_ID, move_page_down, BTN_MB BTN_RB, &kp PAGE_DOWN)
    COMBO(MOVE_LAYER_ID, move_page_up,   BTN_MT BTN_RT, &kp PAGE_UP)
    COMBO(MOVE_LAYER_ID, move_home,      BTN_RB BTN_PB, &kp HOME)
    COMBO(MOVE_LAYER_ID, move_end,       BTN_IB BTN_MB, &kp END)

    COMBO(MOVE_LAYER_ID, move_layer_select, BTN_IB BTN_MB BTN_RB BTN_PB, &to SELECT_LAYER_ID)

    // Select layer
    ////////////////////

    COMBO(SELECT_LAYER_ID, select_page_down, BTN_MB BTN_RB, &kp LS(PAGE_DOWN))
    COMBO(SELECT_LAYER_ID, select_page_up,   BTN_MT BTN_RT, &kp LS(PAGE_UP))
    COMBO(SELECT_LAYER_ID, select_home,      BTN_RB BTN_PB, &kp LS(HOME))
    COMBO(SELECT_LAYER_ID, select_end,       BTN_IB BTN_MB, &kp LS(END))

    COMBO(SELECT_LAYER_ID, select_layer_move, BTN_IB BTN_MB BTN_RB BTN_PB, &to MOVE_LAYER_ID)

    // Bluetooth layer
    ////////////////////

    COMBO(BLUETOOTH_LAYER_ID, output_wire, BTN_IT BTN_MT BTN_RT BTN_PT, &bt BT_CLR)

  };
};
