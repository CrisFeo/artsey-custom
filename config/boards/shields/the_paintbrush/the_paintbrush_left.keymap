#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define KEY_A 3
#define KEY_R 2
#define KEY_T 1
#define KEY_S 0

#define KEY_E 7
#define KEY_Y 6
#define KEY_I 5
#define KEY_O 4

#define COMBO(LAYERS, NAME, KEYS, BINDINGS) \
  combo_##NAME { \
    timeout-ms = <100>; \
    layers = <LAYERS>; \
    key-positions = <KEYS>; \
    bindings = <BINDINGS>; \
  };

#define BASE_LAYER_ID 0
#define SYMBOL_LAYER_ID 1
#define MOVE_LAYER_ID 2
#define BLUETOOTH_LAYER_ID 3

/ {
    keymap {
        compatible = "zmk,keymap";
        base_layer {
            bindings = <
                &kp S &kp T &kp R &kp A
                &kp O &kp I &kp Y &kp E
            >;
        };
        symbol_layer {
            bindings = <
                &kp NUMBER_3 &kp NUMBER_2 &kp NUMBER_1 &kp NUMBER_0
                &kp NUMBER_7 &kp NUMBER_6 &kp NUMBER_5 &kp NUMBER_4
            >;
        };
        move_layer {
            bindings = <
                &kp LC(LEFT_ARROW) &kp LC(DOWN_ARROW) &kp LC(UP_ARROW) &kp LC(RIGHT_ARROW)
                &kp LEFT_ARROW     &kp DOWN_ARROW     &kp UP_ARROW     &kp RIGHT_ARROW
            >;
        };
        bluetooth_layer {
            bindings = <
                &none        &none        &none        &none
                &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0
            >;
        };

    };
};

/ {
    combos {
      compatible = "zmk,combos";

      // Return to base layer from everywhere
      COMBO(SYMBOL_LAYER_ID MOVE_LAYER_ID BLUETOOTH_LAYER_ID, layer_base, KEY_E KEY_T, &to BASE_LAYER_ID)

      // Add modifiers to base and symbol layers
      COMBO(BASE_LAYER_ID SYMBOL_LAYER_ID, control, KEY_S KEY_E,             &sk LEFT_CONTROL)
      COMBO(BASE_LAYER_ID SYMBOL_LAYER_ID, gui,     KEY_S KEY_Y,             &sk LEFT_GUI)
      COMBO(BASE_LAYER_ID SYMBOL_LAYER_ID, alt,     KEY_S KEY_I,             &sk LEFT_ALT)
      COMBO(BASE_LAYER_ID SYMBOL_LAYER_ID, shift,   KEY_R KEY_T KEY_S KEY_E, &sk LEFT_SHIFT)

      // Add shift toggle to base, symbol, and move layers
      COMBO(BASE_LAYER_ID SYMBOL_LAYER_ID MOVE_LAYER_ID, shift_toggle, KEY_R KEY_Y, &kt RIGHT_SHIFT)

      // Base layer
      ////////////////////

      COMBO(BASE_LAYER_ID, b, KEY_E KEY_O,       &kp b)
      COMBO(BASE_LAYER_ID, c, KEY_E KEY_Y,       &kp c)
      COMBO(BASE_LAYER_ID, d, KEY_A KEY_R KEY_T, &kp d)
      COMBO(BASE_LAYER_ID, f, KEY_A KEY_R,       &kp f)
      COMBO(BASE_LAYER_ID, g, KEY_R KEY_T,       &kp g)
      COMBO(BASE_LAYER_ID, h, KEY_E KEY_I,       &kp h)
      COMBO(BASE_LAYER_ID, j, KEY_T KEY_S,       &kp j)
      COMBO(BASE_LAYER_ID, k, KEY_Y KEY_O,       &kp k)
      COMBO(BASE_LAYER_ID, l, KEY_E KEY_Y KEY_I, &kp l)
      COMBO(BASE_LAYER_ID, m, KEY_Y KEY_I KEY_O, &kp m)
      COMBO(BASE_LAYER_ID, n, KEY_I KEY_O,       &kp n)
      COMBO(BASE_LAYER_ID, p, KEY_E KEY_I KEY_O, &kp p)
      COMBO(BASE_LAYER_ID, q, KEY_A KEY_T KEY_S, &kp q)
      COMBO(BASE_LAYER_ID, u, KEY_Y KEY_I,       &kp u)
      COMBO(BASE_LAYER_ID, v, KEY_R KEY_S,       &kp v)
      COMBO(BASE_LAYER_ID, w, KEY_A KEY_S,       &kp w)
      COMBO(BASE_LAYER_ID, x, KEY_R KEY_T KEY_S, &kp x)
      COMBO(BASE_LAYER_ID, z, KEY_A KEY_S,       &kp z)

      COMBO(BASE_LAYER_ID, apostrophe, KEY_A KEY_Y KEY_I, &kp APOSTROPHE)
      COMBO(BASE_LAYER_ID, period,     KEY_A KEY_Y,       &kp PERIOD)
      COMBO(BASE_LAYER_ID, colon,      KEY_A KEY_I,       &kp COLON)
      COMBO(BASE_LAYER_ID, question,   KEY_A KEY_O,       &kp QUESTION)

      COMBO(BASE_LAYER_ID, space,     KEY_E KEY_Y KEY_I KEY_O, &kp SPACE)
      COMBO(BASE_LAYER_ID, enter,     KEY_A KEY_E,             &kp ENTER)
      COMBO(BASE_LAYER_ID, escape,    KEY_A KEY_R KEY_O,       &kp ESCAPE)
      COMBO(BASE_LAYER_ID, tab,       KEY_A KEY_R KEY_T KEY_O, &kp TAB)
      COMBO(BASE_LAYER_ID, backspace, KEY_R KEY_E,             &kp BACKSPACE)
      COMBO(BASE_LAYER_ID, delete,    KEY_R KEY_I,             &kp DELETE)

      COMBO(BASE_LAYER_ID, layer_symbol,    KEY_A KEY_T, &sl SYMBOL_LAYER_ID)
      COMBO(BASE_LAYER_ID, layer_move,      KEY_A KEY_T, &to MOVE_LAYER_ID)
      COMBO(BASE_LAYER_ID, layer_bluetooth, KEY_T KEY_I, &sl BLUETOOTH_LAYER_ID)

      // Symbol layer
      ////////////////////

      COMBO(SYMBOL_LAYER_ID, 8, KEY_A KEY_R, &kp 8)
      COMBO(SYMBOL_LAYER_ID, 9, KEY_E KEY_Y, &kp 9)

      COMBO(SYMBOL_LAYER_ID, plus,     KEY_E KEY_I KEY_O,       &kp plus)
      COMBO(SYMBOL_LAYER_ID, asterisk, KEY_A KEY_T KEY_S,       &kp asterisk)
      COMBO(SYMBOL_LAYER_ID, minus,    KEY_E KEY_Y KEY_I,       &kp minus)
      COMBO(SYMBOL_LAYER_ID, equals,   KEY_Y KEY_I KEY_O,       &kp equals)
      COMBO(SYMBOL_LAYER_ID, caret,    KEY_A KEY_R KEY_T KEY_S, &kp caret)

      COMBO(SYMBOL_LAYER_ID, left_parenthesis,     KEY_T KEY_S,       &kp left_parenthesis)
      COMBO(SYMBOL_LAYER_ID, right_parenthesis,    KEY_R KEY_T,       &kp right_parenthesis)
      COMBO(SYMBOL_LAYER_ID, left_curly_bracket,   KEY_I KEY_O,       &kp left_curly_bracket)
      COMBO(SYMBOL_LAYER_ID, right_curly_bracket,  KEY_O KEY_Y,       &kp right_curly_bracket)
      COMBO(SYMBOL_LAYER_ID, left_square_bracket,  KEY_R KEY_S,       &kp left_square_bracket)
      COMBO(SYMBOL_LAYER_ID, right_square_bracket, KEY_A KEY_T,       &kp right_square_bracket)
      COMBO(SYMBOL_LAYER_ID, left_angle_bracket,   KEY_Y KEY_O,       &kp left_angle_bracket)
      COMBO(SYMBOL_LAYER_ID, right_angle_bracket,  KEY_E KEY_I,       &kp right_angle_bracket)
      COMBO(SYMBOL_LAYER_ID, forward_slash,        KEY_A KEY_R KEY_T, &kp forward_slash)
      COMBO(SYMBOL_LAYER_ID, backward_slash,       KEY_R KEY_T KEY_S, &kp backward_slash)

      COMBO(SYMBOL_LAYER_ID, vertical_bar, KEY_E KEY_O,             &kp vertical_bar)
      COMBO(SYMBOL_LAYER_ID, quote,        KEY_A KEY_Y KEY_I,       &kp quote)
      COMBO(SYMBOL_LAYER_ID, comma,        KEY_A KEY_Y,             &kp comma)
      COMBO(SYMBOL_LAYER_ID, semicolon,    KEY_A KEY_I,             &kp semicolon)
      COMBO(SYMBOL_LAYER_ID, exclamation,  KEY_A KEY_O,             &kp exclamation)
      COMBO(SYMBOL_LAYER_ID, grave,        KEY_A KEY_R KEY_T KEY_O, &kp grave)
      COMBO(SYMBOL_LAYER_ID, tilde,        KEY_T KEY_I,             &kp tilde)
      COMBO(SYMBOL_LAYER_ID, at,           KEY_A KEY_R KEY_O,       &kp at)
      COMBO(SYMBOL_LAYER_ID, pound,        KEY_A KEY_E,             &kp pound)
      COMBO(SYMBOL_LAYER_ID, dollar,       KEY_R KEY_E,             &kp dollar)
      COMBO(SYMBOL_LAYER_ID, percent,      KEY_R KEY_I,             &kp percent)
      COMBO(SYMBOL_LAYER_ID, ampersand,    KEY_A KEY_S,             &kp ampersand)
      COMBO(SYMBOL_LAYER_ID, underscore,   KEY_E KEY_Y KEY_I KEY_O, &kp underscore)

      // Move layer
      ////////////////////

      COMBO(MOVE_LAYER_ID, page_down,    KEY_Y KEY_I,             &kp PAGE_DOWN)
      COMBO(MOVE_LAYER_ID, page_up,      KEY_R KEY_T,             &kp PAGE_UP)
      COMBO(MOVE_LAYER_ID, home,         KEY_I KEY_O,             &kp HOME)
      COMBO(MOVE_LAYER_ID, end,          KEY_E KEY_Y,             &kp END)

      // Bluetooth layer
      ////////////////////

      COMBO(BLUETOOTH_LAYER_ID, output_wire, KEY_A KEY_R KEY_T KEY_S, &bt BT_CLR)

    };
};
